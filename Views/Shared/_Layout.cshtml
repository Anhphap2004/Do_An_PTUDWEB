@using Pantus.Utilities;
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>PanTus - Nhà Hàng Chất Lượng Số 1</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">
    <link href="https://cdn.leanhduc.pro.vn/utilities/multi-color-star-effects/style.css" rel="stylesheet" />
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Playball&display=swap" rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.leanhduc.pro.vn/utilities/animation/shake-effect/style.css" />
    <!-- Libraries Stylesheet -->
    <link href="~/assets/lib/animate/animate.min.css" rel="stylesheet">
    <link href="~/assets/lib/lightbox/css/lightbox.min.css" rel="stylesheet">
    <link href="~/assets/lib/owlcarousel/owl.carousel.min.css" rel="stylesheet">

    <!-- Customized Bootstrap Stylesheet -->
    <link href="~/assets/css/bootstrap.min.css" rel="stylesheet">

    <link href="~/assets/toastr/toastr.css" rel="stylesheet" />
    <!-- Template Stylesheet -->
    <link href="~/assets/css/style.css" rel="stylesheet">
</head>

<body>
    <canvas id="canvas" style="position:fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 9999;"></canvas>
  @*   <div class='phap_roi'>
        <canvas class='star'></canvas>
    </div> *@
    <div>
        <a class="AnhhPhapp-tet-left" href="#">
            <img alt="tet" src="~/assets/TrangTri/img-before-head.webp" style="width:200px;" />
        </a>
    </div>
    <div>
        <a class="AnhhPhapp-tet-right" href="#">
            <img alt="tet" src="~/assets/TrangTri/mat-trang-long-den-trung-thu.webp" style="width:150px;" />
        </a>
    </div>
    <!--? Decorate End ?-->
    <!-- Navbar start -->
    <div class="container-fluid nav-bar  phapbg">
        <div class="container">
            <nav class="navbar navbar-light navbar-expand-lg py-4">
                <a href="index.html" class="navbar-brand">
                    <h1 class=" fw-bold mb-0 rung" style="color: #e0ec0b">Pan<span class="text-dark">Tus</span> </h1>
                </a>
                <button class="navbar-toggler py-2 px-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                    <span class="fa fa-bars text-primary"></span>
                </button>
                <div class="countdown" style="display: flex; gap: 20px;justify-content: center; align-items: center; height: 20px;  color: #ba1718; font-family: 'Arial', sans-serif; font-size: 20px; margin-left: 50px">
                    <div class="number" id="hours" style="padding: 10px; background-color: white; border-radius: 10px; transition: transform 0.5s ease; min-width: 30px; text-align: center;">00</div>
                    <span style="color: yellow; font-size: 25px">:</span>
                    <div class="number" id="minutes" style="padding: 10px; background-color: white; border-radius: 10px; transition: transform 0.5s ease; min-width: 30px; text-align: center;">00</div>
                    <span style="color: yellow;font-size: 25px">:</span>
                    <div class="number" id="seconds" style="padding: 10px; background-color: white; border-radius: 10px; transition: transform 0.5s ease; min-width: 30px; text-align: center;">00</div>
                </div>

                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <div class="navbar-nav mx-auto">
                        @await Component.InvokeAsync("MenuTop")
                    </div>
                    <!-- Nút Giỏ hàng (Liên kết) -->
                    <div style="position: relative; display: inline-block;">
                        <a href="/cart" class="btn-cart btn btn-light text-danger btn-md-square me-4 rounded-circle d-none d-lg-inline-flex" style="position: relative;">
                            <i class="fas fa-shopping-cart"></i> <!-- Biểu tượng giỏ hàng -->
                        </a>
                        <!-- Số lượng sản phẩm -->
                        <span id="cartCount" style="position: absolute; top: -9px; right: 15px; background-color: #dc3545; color: #fff;
    font-size: 12px; font-weight: bold; border-radius: 50%; padding: 2px 6px; text-align: center;">0</span>
                    </div>


                    <!-- Nút Hồ Sơ Người Dùng với hình ảnh và style inline -->
                    <div class="dropdown d-inline-block" style="position: relative;">
                        <!-- Nút Đăng Nhập nếu chưa đăng nhập -->
                        @if(Function._Username == string.Empty)
                        { 
                            <div id="loginBtn" style="display: block;">
                                <a href="~/Admin/login/Index" class="btn btn-primary">Đăng Nhập </a>
                            </div>
                        }
                        else
                        {
                             <!-- Menu Hồ Sơ khi đã đăng nhập -->
                        <div id="profileSection" style="display: block;">
                            <a href="#" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <!-- Hiển thị ảnh đại diện -->
                                <img id="profileImage" src="~/assets/img/UserProfile/AnhhPhapp.jpg" alt="User"
                                     style="width: 50px; height: 50px; object-fit: cover; border-radius: 50%; border: 2px solid;">
                            </a>
                            <!-- Menu con (Dropdown) với CSS inline để hiển thị khi hover -->
                            <ul class="dropdown-menu" aria-labelledby="profileDropdown"
                                style="display: none; position: absolute; left: 0; top: 100%; visibility: hidden; z-index: 10;">
                                <li><a class="dropdown-item" asp-controller="DetailUser" asp-action="Detail">Thông Tin Người Dùng</a></li>
                                <li><a class="dropdown-item" href="/change-password">Đổi mật khẩu</a></li>
                                <li><a class="dropdown-item" asp-controller="Home" asp-action="Logout">Đăng xuất</a></li>
                            </ul>
                        </div>
                        }
                       
                    </div>
                </div>
            </nav>
        </div>
    </div>
    <!-- Navbar End -->
    <!-- Modal Search Start -->
    <div class="modal fade" id="searchModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content rounded-0">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Search by keyword</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex align-items-center">
                    <div class="input-group w-75 mx-auto d-flex">
                        <input type="search" class="form-control bg-transparent p-3" placeholder="keywords" aria-describedby="search-icon-1">
                        <span id="search-icon-1" class="input-group-text p-3"><i class="fa fa-search"></i></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Search End -->
    @RenderBody()
    <!-- Footer Start -->
    <div class="container-fluid footer py-6 my-6 mb-0 phapbg wow bounceInUp" data-wow-delay="0.1s">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-6">
                    <div class="footer-item">
                        <h1 class="text-primary">Cater<span class="text-dark">Serv</span></h1>
                        <p class="phapcolor lh-lg mb-4">Chúng tôi cung cấp dịch vụ hoàn hảo với những tiện nghi đẳng cấp và đội ngũ chuyên nghiệp.</p>
                        <div class="footer-icon d-flex">
                            <a class="btn btn-primary btn-sm-square me-2 rounded-circle" href=""><i class="fab fa-facebook-f"></i></a>
                            <a class="btn btn-primary btn-sm-square me-2 rounded-circle" href=""><i class="fab fa-twitter"></i></a>
                            <a href="#" class="btn btn-primary btn-sm-square me-2 rounded-circle"><i class="fab fa-instagram"></i></a>
                            <a href="#" class="btn btn-primary btn-sm-square rounded-circle"><i class="fab fa-linkedin-in"></i></a>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <div class="footer-item">
                        <h4 class="mb-4">Tiện Ích Đặc Biệt</h4>
                        <div class="d-flex flex-column align-items-start">
                            <a class="text-body mb-3 phapcolor" href=""><i class="fa fa-check text-primary me-2"></i>Bánh Burger Phô Mai</a>
                            <a class="text-body mb-3 phapcolor" href=""><i class="fa fa-check text-primary me-2"></i>Bánh Sandwich</a>
                            <a class="text-body mb-3 phapcolor" href=""><i class="fa fa-check text-primary me-2"></i>Bánh Burger Panner</a>
                            <a class="text-body mb-3 phapcolor" href=""><i class="fa fa-check text-primary me-2"></i>Món Ngọt Đặc Biệt</a>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <div class="footer-item">
                        <h4 class="mb-4">Liên Hệ</h4>
                        <div class="d-flex flex-column align-items-start">
                            <p class="phapcolor"><i class="fa fa-map-marker-alt  me-2"></i> 123 Đường ABC, Thành phố New York, Hoa Kỳ</p>
                            <p class="phapcolor"><i class="fa fa-phone-alt  me-2"></i> (+012) 3456 7890 123</p>
                            <p class="phapcolor"><i class="fas fa-envelope  me-2"></i> info@example.com</p>
                            <p class="phapcolor"><i class="fa fa-clock  me-2"></i> Dịch Vụ 24/7</p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <div class="footer-item">
                        <h4 class="mb-4">Bộ Sưu Tập Mạng Xã Hội</h4>
                        <div class="row g-2">
                            <div class="col-4">
                                <img src="~/assets/img/menu-01.jpg" class="img-fluid rounded-circle border border-primary p-2" alt="">
                            </div>
                            <div class="col-4">
                                <img src="~/assets/img/menu-02.jpg" class="img-fluid rounded-circle border border-primary p-2" alt="">
                            </div>
                            <div class="col-4">
                                <img src="~/assets/img/menu-03.jpg" class="img-fluid rounded-circle border border-primary p-2" alt="">
                            </div>
                            <div class="col-4">
                                <img src="~/assets/img/menu-04.jpg" class="img-fluid rounded-circle border border-primary p-2" alt="">
                            </div>
                            <div class="col-4">
                                <img src="~/assets/img/menu-05.jpg" class="img-fluid rounded-circle border border-primary p-2" alt="">
                            </div>
                            <div class="col-4">
                                <img src="~/assets/img/menu-06.jpg" class="img-fluid rounded-circle border border-primary p-2" alt="">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer End -->
    <!-- Copyright Start -->
    <div class="container-fluid copyright bg-dark py-4">
        <div class="container">
            <div class="row">
                <div class="col-md-6 text-center text-md-start mb-3 mb-md-0">
                    <span class="text-light"><a href="#"><i class="fas fa-copyright text-light me-2"></i>Anhh Phapp</a>, All right reserved.</span>
                </div>
                <div class="col-md-6 my-auto text-center text-md-end text-white">
                    <!--/*** This template is free as long as you keep the below author’s credit link/attribution link/backlink. ***/-->
                    <!--/*** If you'd like to use the template without the below author’s credit link/attribution link/backlink, ***/-->
                    <!--/*** you can purchase the Credit Removal License from "https://htmlcodex.com/credit-removal". ***/-->
                    Thiết Kế Bởi <a class="border-bottom" href="https://htmlcodex.com">Anhh Phapp</a>
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    <!-- Back to Top -->
    <a href="#" class="btn btn-md-square btn-primary rounded-circle back-to-top"><i class="fa fa-arrow-up"></i></a>
	

    <!-- JavaScript Libraries -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/assets/lib/wow/wow.min.js"></script>
    <script src="~/assets/lib/easing/easing.min.js"></script>
    <script src="~/assets/lib/waypoints/waypoints.min.js"></script>
    <script src="~/assets/lib/counterup/counterup.min.js"></script>
    <script src="~/assets/lib/lightbox/js/lightbox.min.js"></script>
    <script src="~/assets/lib/owlcarousel/owl.carousel.min.js"></script>
	<script src="~/assets/toastr/toastr.min.js"></script>
    <!-- Template Javascript -->
    <script src="~/assets/js/main.js"></script>
    <script src="https://cdn.leanhduc.pro.vn/jquery/3.6.0.min.js"></script>
    <script src="https://cdn.leanhduc.pro.vn/utilities/multi-color-star-effects/main.js"></script>
    @RenderSection("Scripts", required: false)
    <script>
        
                    // Đặt thời gian đếm ngược là 1 ngày (24 giờ) từ thời điểm hiện tại
                    const countdownDate = new Date(Date.now() + 24 * 60 * 60 * 1000).getTime();

                    const updateCountdown = () => {
                        const now = new Date().getTime();
                        const distance = countdownDate - now;

                        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                        document.getElementById("hours").innerText = String(hours).padStart(2, '0');
                        document.getElementById("minutes").innerText = String(minutes).padStart(2, '0');
                        document.getElementById("seconds").innerText = String(seconds).padStart(2, '0');

                        // Hiệu ứng chuyển số
                        document.querySelectorAll('.number').forEach((el) => {
                            el.style.transform = 'scale(1.2)';
                            setTimeout(() => {
                                el.style.transform = 'scale(1)';
                            }, 500);
                        });

                        if (distance < 0) {
                            clearInterval(interval);
                            document.querySelector('nav').innerHTML = "<h1 style='color: white; text-align: center;'>Thời gian đã hết!</h1>";
                        }
                    };

                    const interval = setInterval(updateCountdown, 1000);
               // Biến lưu trữ số lượng sản phẩm trong giỏ hàng
        let cartQuantity = 0;

        // Cập nhật số lượng sản phẩm hiển thị trên icon giỏ hàng
        function updateCartQuantity() {
            // Cập nhật số lượng hiển thị trong giỏ hàng
            document.getElementById('cartCount').innerText = cartQuantity;
        }

        // Cập nhật tổng giá trị của giỏ hàng
        function updateTotal() {
            const cartItems = document.querySelectorAll(".cart-item");
            let grandTotal = 0;
            cartQuantity = 0;  // Reset số lượng giỏ hàng mỗi lần tính lại tổng

            cartItems.forEach(item => {
                const price = parseInt(item.getAttribute("data-price"));
                const quantity = parseInt(item.querySelector(".quantity").value);
                const itemTotal = price * quantity;

                // Cập nhật tổng giá cho sản phẩm hiện tại
                item.querySelector(".total-item-price").innerText = itemTotal.toLocaleString("vi-VN");

                // Cộng vào tổng giỏ hàng
                grandTotal += itemTotal;
                // Cộng số lượng sản phẩm vào giỏ hàng
                cartQuantity += quantity;
            });

            // Cập nhật tổng giỏ hàng
            document.getElementById("totalPrice").innerText = grandTotal.toLocaleString("vi-VN") + "đ";

            // Cập nhật số lượng sản phẩm trên icon giỏ hàng
            updateCartQuantity();
        }

        // Cập nhật số lượng khi người dùng tăng giảm sản phẩm trong giỏ hàng
        document.querySelectorAll(".btn-plus").forEach(button => {
            button.addEventListener("click", function () {
                const quantityInput = this.parentNode.querySelector(".quantity");
                quantityInput.value = parseInt(quantityInput.value) + 1;
                updateTotal();
            });
        });

        document.querySelectorAll(".btn-minus").forEach(button => {
            button.addEventListener("click", function () {
                const quantityInput = this.parentNode.querySelector(".quantity");
                if (quantityInput.value > 1) {
                    quantityInput.value = parseInt(quantityInput.value) - 1;
                    updateTotal();
                }
            });
        });

        document.querySelectorAll(".quantity").forEach(input => {
            input.addEventListener("input", function () {
                if (this.value < 1) this.value = 1; // Đảm bảo số lượng tối thiểu là 1
                updateTotal();
            });
        });

        // Khởi tạo tổng giá ban đầu và số lượng sản phẩm
        updateTotal();

    </script>
    <script>
                // when animating on canvas, it is best to use requestAnimationFrame instead of setTimeout or setInterval
        // not supported in all browsers though and sometimes needs a prefix, so we need a shim
        window.requestAnimFrame = ( function() {
            return window.requestAnimationFrame ||
                        window.webkitRequestAnimationFrame ||
                        window.mozRequestAnimationFrame ||
                        function( callback ) {
                            window.setTimeout( callback, 1000 / 60 );
                        };
        })();

        // now we will setup our basic variables for the demo
        var canvas = document.getElementById( 'canvas' ),
                ctx = canvas.getContext( '2d' ),
                // full screen dimensions
                cw = window.innerWidth,
                ch = window.innerHeight,
                // firework collection
                fireworks = [],
                // particle collection
                particles = [],
                // starting hue
                hue = 120,
                // when launching fireworks with a click, too many get launched at once without a limiter, one launch per 5 loop ticks
                limiterTotal = 20,
                limiterTick = 0,
                // this will time the auto launches of fireworks, one launch per 80 loop ticks
                timerTotal = 500,
                timerTick = 0,
                mousedown = false,
                // mouse x coordinate,
                mx,
                // mouse y coordinate
                my;


        // set canvas dimensions
        canvas.width = cw;
        canvas.height = ch;

        // now we are going to setup our function placeholders for the entire demo

        // get a random number within a range
        function random( min, max ) {
            return Math.random() * ( max - min ) + min;
        }

        // calculate the distance between two points
        function calculateDistance( p1x, p1y, p2x, p2y ) {
            var xDistance = p1x - p2x,
                    yDistance = p1y - p2y;
            return Math.sqrt( Math.pow( xDistance, 2 ) + Math.pow( yDistance, 2 ) );
        }

        // create firework
        function Firework( sx, sy, tx, ty ) {
            // actual coordinates
            this.x = sx;
            this.y = sy;
            // starting coordinates
            this.sx = sx;
            this.sy = sy;
            // target coordinates
            this.tx = tx;
            this.ty = ty;
            // distance from starting point to target
            this.distanceToTarget = calculateDistance( sx, sy, tx, ty );
            this.distanceTraveled = 0;
            // track the past coordinates of each firework to create a trail effect, increase the coordinate count to create more prominent trails
            this.coordinates = [];
            this.coordinateCount = 3;
            // populate initial coordinate collection with the current coordinates
            while( this.coordinateCount-- ) {
                this.coordinates.push( [ this.x, this.y ] );
            }
            this.angle = Math.atan2( ty - sy, tx - sx );
            this.speed = 2;
            this.acceleration = 1.05;
            this.brightness = random( 50, 70 );
            // circle target indicator radius
            this.targetRadius = 1;
        }

        // update firework
        Firework.prototype.update = function( index ) {
            // remove last item in coordinates array
            this.coordinates.pop();
            // add current coordinates to the start of the array
            this.coordinates.unshift( [ this.x, this.y ] );

            // cycle the circle target indicator radius
            if( this.targetRadius < 8 ) {
                this.targetRadius += 0.3;
            } else {
                this.targetRadius = 1;
            }

            // speed up the firework
            this.speed *= this.acceleration;

            // get the current velocities based on angle and speed
            var vx = Math.cos( this.angle ) * this.speed,
                    vy = Math.sin( this.angle ) * this.speed;
            // how far will the firework have traveled with velocities applied?
            this.distanceTraveled = calculateDistance( this.sx, this.sy, this.x + vx, this.y + vy );

            // if the distance traveled, including velocities, is greater than the initial distance to the target, then the target has been reached
            if( this.distanceTraveled >= this.distanceToTarget ) {
                createParticles( this.tx, this.ty );
                // remove the firework, use the index passed into the update function to determine which to remove
                fireworks.splice( index, 1 );
            } else {
                // target not reached, keep traveling
                this.x += vx;
                this.y += vy;
            }
        }

        // draw firework
        Firework.prototype.draw = function() {
            ctx.beginPath();
            // move to the last tracked coordinate in the set, then draw a line to the current x and y
            ctx.moveTo( this.coordinates[ this.coordinates.length - 1][ 0 ], this.coordinates[ this.coordinates.length - 1][ 1 ] );
            ctx.lineTo( this.x, this.y );
            ctx.strokeStyle = 'hsl(' + hue + ', 100%, ' + this.brightness + '%)';
            ctx.stroke();

            ctx.beginPath();
            // draw the target for this firework with a pulsing circle
            //ctx.arc( this.tx, this.ty, this.targetRadius, 0, Math.PI * 2 );
            ctx.stroke();
        }

        // create particle
        function Particle( x, y ) {
            this.x = x;
            this.y = y;
            // track the past coordinates of each particle to create a trail effect, increase the coordinate count to create more prominent trails
            this.coordinates = [];
            this.coordinateCount = 5;

            while( this.coordinateCount-- ) {
                this.coordinates.push( [ this.x, this.y ] );
            }
            // set a random angle in all possible directions, in radians
            this.angle = random( 0, Math.PI * 2 );
            this.speed = random( 1, 10 );
            // friction will slow the particle down
            this.friction = 0.95;
            // gravity will be applied and pull the particle down
            this.gravity = 0.6;
            // set the hue to a random number +-20 of the overall hue variable
            this.hue = random( hue - 20, hue + 20 );
            this.brightness = random( 50, 80 );
            this.alpha = 1;
            // set how fast the particle fades out
            this.decay = random( 0.0075, 0.009 );
        }

        // update particle
        Particle.prototype.update = function( index ) {
            // remove last item in coordinates array
            this.coordinates.pop();
            // add current coordinates to the start of the array
            this.coordinates.unshift( [ this.x, this.y ] );
            // slow down the particle
            this.speed *= this.friction;
            // apply velocity
            this.x += Math.cos( this.angle ) * this.speed;
            this.y += Math.sin( this.angle ) * this.speed + this.gravity;
            // fade out the particle
            this.alpha -= this.decay;

            // remove the particle once the alpha is low enough, based on the passed in index
            if( this.alpha <= this.decay ) {
                particles.splice( index, 1 );
            }
        }

        // draw particle
        Particle.prototype.draw = function() {
            ctx. beginPath();
            // move to the last tracked coordinates in the set, then draw a line to the current x and y
            ctx.moveTo( this.coordinates[ this.coordinates.length - 1 ][ 0 ], this.coordinates[ this.coordinates.length - 1 ][ 1 ] );
            ctx.lineTo( this.x, this.y );
            ctx.strokeStyle = 'hsla(' + this.hue + ', 100%, ' + this.brightness + '%, ' + this.alpha + ')';

            ctx.stroke();
        }

        // create particle group/explosion
        function createParticles( x, y ) {
            // increase the particle count for a bigger explosion, beware of the canvas performance hit with the increased particles though
            var particleCount = 20;
            while( particleCount-- ) {
                particles.push( new Particle( x, y ) );
            }
        }


        // main demo loop
        function loop() {
            // this function will run endlessly with requestAnimationFrame
            requestAnimFrame( loop );

            // increase the hue to get different colored fireworks over time
            hue += 0.5;

            // normally, clearRect() would be used to clear the canvas
            // we want to create a trailing effect though
            // setting the composite operation to destination-out will allow us to clear the canvas at a specific opacity, rather than wiping it entirely
            ctx.globalCompositeOperation = 'destination-out';
            // decrease the alpha property to create more prominent trails
            ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
            ctx.fillRect( 0, 0, cw, ch );
            // change the composite operation back to our main mode
            // lighter creates bright highlight points as the fireworks and particles overlap each other
            ctx.globalCompositeOperation = 'lighter';

            // loop over each firework, draw it, update it
            var i = fireworks.length;
            while( i-- ) {
                fireworks[ i ].draw();
                fireworks[ i ].update( i );
            }

            // loop over each particle, draw it, update it
            var i = particles.length;
            while( i-- ) {
                particles[ i ].draw();
                particles[ i ].update( i );

            }


            // launch fireworks automatically to random coordinates, when the mouse isn't down
            if( timerTick >= timerTotal ) {
                timerTick = 0;
            } else {
                var temp = timerTick % 400;
                if(temp <= 15){
                    fireworks.push( new Firework( 100, ch, random( 190, 200 ), random(90, 100) ));
                    fireworks.push( new Firework( cw - 100, ch, random(cw - 200, cw - 190), random(90, 100) ));
                }

                var temp3 = temp / 10;

                if(temp > 319){
                    fireworks.push(new Firework(300 + (temp3 - 31 ) * 100 , ch, 300 + (temp3 - 31) * 100 , 200));
                }

                timerTick++;
            }

            // limit the rate at which fireworks get launched when mouse is down
            if( limiterTick >= limiterTotal ) {
                if( mousedown ) {
                    // start the firework at the bottom middle of the screen, then set the current mouse coordinates as the target
                    fireworks.push( new Firework( cw / 2, ch, mx, my ) );
                    limiterTick = 0;
                }
            } else {
                limiterTick++;
            }
        }

        // mouse event bindings
        // update the mouse coordinates on mousemove
        canvas.addEventListener( 'mousemove', function( e ) {
            mx = e.pageX - canvas.offsetLeft;
            my = e.pageY - canvas.offsetTop;
        });

        // toggle mousedown state and prevent canvas from being selected
        canvas.addEventListener( 'mousedown', function( e ) {
            e.preventDefault();
            mousedown = true;
        });

        canvas.addEventListener( 'mouseup', function( e ) {
            e.preventDefault();
            mousedown = false;
        });

        // once the window loads, we are ready for some fireworks!
        window.onload = loop;
    </script>
  
</body>

</html>